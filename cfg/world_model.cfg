#!/usr/bin/env python
PACKAGE = "bitbots_world_model"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group_ros = gen.add_group("ROS")
group_misc = gen.add_group("MISC")
group_visualization = gen.add_group("Visualization")
group_pf = gen.add_group("Particle Filters")

group_pf_local = group_pf.add_group("Local Filter")
group_pf_global = group_pf.add_group("Global Filter")

group_pf_local_ball = group_pf_local.add_group("Local Ball Filter")
group_pf_local_mates = group_pf_local.add_group("Local Mate Filter")
group_pf_local_opponents = group_pf_local.add_group("Local Opponent Filter")
group_pf_local_obstacles = group_pf_local.add_group("Local Obstacle Filter")

group_ros.add("ball_topic", str_t, 0, "the ball subscribe topic", None)
group_ros.add("obstacles_topic", str_t, 0, "the objects subscribe topic", None)
group_ros.add("local_model_topic", str_t, 0, "the local model publish topic", None)
group_ros.add("global_model_topic", str_t, 0, "the global model publish topic", None)
group_ros.add("local_particles_topic", str_t, 0, "the local particles publish topic", None)
group_ros.add("reset_filters_service_name", str_t, 0, "the name of the reset filters service", None)
group_ros.add("publishing_frequency", int_t, 0, "the publishing frequency in Hz", None, min=1, max=100)


team_color_enum = gen.enum([gen.const("TeamRed",      int_t, 2, "Red"),
                       gen.const("TeamBlue",     int_t, 3, "Blue")],
                     "The color of team mate markers")

group_misc.add("team_color", int_t, 0, "The color of the own team", 2, edit_method=team_color_enum)

group_misc.add("initial_robot_x", double_t, 0, "The initial x Position of the robot in meters (measured from the center)", None, min=-15, max=15)
group_misc.add("initial_robot_y", double_t, 0, "The initial y Position of the robot in meters (measured from the center)", None, min=-5, max=5)

group_misc.add("field_height", double_t, 0, "The height of the field in meters (the side without a goal)", None, min=0.1, max=30)
group_misc.add("field_width", double_t, 0, "The width of the field in meters (the side with a goal)", None, min=0.1, max=10)

marker_color_enum = gen.enum([gen.const("White", int_t, 0, "White"),
                              gen.const("Black", int_t, 1, "Black"),
                              gen.const("Yellow", int_t, 2, "Yellow"),
                              gen.const("Blue", int_t, 3, "Blue"),
                              gen.const("Red", int_t, 4, "Red"),
                              gen.const("Green", int_t, 5, "Green"),
                              gen.const("Orange", int_t, 6, "Orange"),
                              gen.const("Violet", int_t, 7, "Violet")],
                              "Color of markers for visualization")
group_visualization.add("ball_marker_color", int_t, 0, "The color of the ball markers", 5, edit_method=marker_color_enum)
group_visualization.add("mate_marker_color", int_t, 0, "The color of the mate markers", 5, edit_method=marker_color_enum)
group_visualization.add("opponent_marker_color", int_t, 0, "The color of the opponent markers", 4, edit_method=marker_color_enum)
group_visualization.add("obstacle_marker_color", int_t, 0, "The color of the obstacle markers", 3, edit_method=marker_color_enum)

group_visualization.add("debug_visualization", bool_t, 0, "publish debug visualization messages", None)


group_pf_local_ball.add("local_ball_particle_number", int_t, 0, "The amount of particles in the local ball filter", None, min=1, max=10000)
group_pf_local_ball.add("local_ball_diffusion_x_std_dev", double_t, 0, "The standard deviation of the diffusion on the x axis in the local ball filter", None, min=0.1, max=5)
group_pf_local_ball.add("local_ball_diffusion_y_std_dev", double_t, 0, "The standard deviation of the diffusion on the y axis in the local ball filter", None, min=0.1, max=5)
group_pf_local_ball.add("local_ball_diffusion_multiplicator", double_t, 0, "The multiplicator of the diffusion in the local ball filter", None, min=0.0001, max=10)
group_pf_local_ball.add("local_ball_min_weight", double_t, 0, "The minimal weight of a Particle in the local ball filter", None, min=0.0, max=1)
group_pf_local_ball.add("local_ball_explorer_rate", double_t, 0, "The share of explorer particles in the local ball filter", None, min=0.0, max=1)
group_pf_local_ball.add("local_ball_max_distance", double_t, 0, "The maximal distance of a ball relative to the robot", None, min=0.0, max=40)

group_pf_local_mates.add("local_mate_particle_number", int_t, 0, "The amount of particles in the local mate filter", None, min=1, max=10000)
group_pf_local_mates.add("local_mate_diffusion_x_std_dev", double_t, 0, "The standard deviation of the diffusion on the x axis in the local mate filter", None, min=0.1, max=5)
group_pf_local_mates.add("local_mate_diffusion_y_std_dev", double_t, 0, "The standard deviation of the diffusion on the y axis in the local mate filter", None, min=0.1, max=5)
group_pf_local_mates.add("local_mate_diffusion_multiplicator", double_t, 0, "The multiplicator of the diffusion in the local mate filter", None, min=0.0001, max=10)
group_pf_local_mates.add("local_mate_min_weight", double_t, 0, "The minimal weight of a Particle in the local mate filter", None, min=0.0, max=1)
group_pf_local_mates.add("local_mate_explorer_rate", double_t, 0, "The share of explorer particles in the local mate filter", None, min=0.0, max=1)
group_pf_local_mates.add("local_mate_max_distance", double_t, 0, "The maximal distance of a mate relative to the robot", None, min=0.0, max=40)

group_pf_local_opponents.add("local_opponent_particle_number", int_t, 0, "The amount of particles in the local opponent filter", None, min=1, max=10000)
group_pf_local_opponents.add("local_opponent_diffusion_x_std_dev", double_t, 0, "The standard deviation of the diffusion on the x axis in the local opponent filter", None, min=0.1, max=5)
group_pf_local_opponents.add("local_opponent_diffusion_y_std_dev", double_t, 0, "The standard deviation of the diffusion on the y axis in the local opponent filter", None, min=0.1, max=5)
group_pf_local_opponents.add("local_opponent_diffusion_multiplicator", double_t, 0, "The multiplicator of the diffusion in the local opponent filter", None, min=0.0001, max=10)
group_pf_local_opponents.add("local_opponent_min_weight", double_t, 0, "The minimal weight of a Particle in the local opponent filter", None, min=0.0, max=1)
group_pf_local_opponents.add("local_opponent_explorer_rate", double_t, 0, "The share of explorer particles in the local opponent filter", None, min=0.0, max=1)
group_pf_local_opponents.add("local_opponent_max_distance", double_t, 0, "The maximal distance of an opponent relative to the robot", None, min=0.0, max=40)

group_pf_local_obstacles.add("local_obstacle_particle_number", int_t, 0, "The amount of particles in the local obstacle filter", None, min=1, max=10000)
group_pf_local_obstacles.add("local_obstacle_min_width", double_t, 0, "The minimal width of obstacles in the local obstacle filter in meters", None, min=0.01, max=10)
group_pf_local_obstacles.add("local_obstacle_max_width", double_t, 0, "The maximal width of obstacles in the local obstacle filter in meters", None, min=0.01, max=10)
group_pf_local_obstacles.add("local_obstacle_diffusion_x_std_dev", double_t, 0, "The standard deviation of the diffusion on the x axis in the local obstacle filter", None, min=0.1, max=5)
group_pf_local_obstacles.add("local_obstacle_diffusion_y_std_dev", double_t, 0, "The standard deviation of the diffusion on the y axis in the local obstacle filter", None, min=0.1, max=5)
group_pf_local_obstacles.add("local_obstacle_diffusion_multiplicator", double_t, 0, "The multiplicator of the diffusion in the local obstacle filter", None, min=0.0001, max=10)
group_pf_local_obstacles.add("local_obstacle_min_weight", double_t, 0, "The minimal weight of a Particle in the local obstacle filter", None, min=0.0, max=1)
group_pf_local_obstacles.add("local_obstacle_explorer_rate", double_t, 0, "The share of explorer particles in the local obstacle filter", None, min=0.0, max=1)
group_pf_local_obstacles.add("local_obstacle_max_distance", double_t, 0, "The maximal distance of an obstacle relative to the robot", None, min=0.0, max=40)

exit(gen.generate(PACKAGE, "world_model", "WorldModel"))
