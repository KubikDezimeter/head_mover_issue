#!/usr/bin/env python
PACKAGE = "bitbots_visual_compass"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group_ros = gen.add_group("ROS", type="tab")

group_setup = gen.add_group("Setup", type="tab")

group_compass = gen.add_group("Compass", type="tab")

group_compass_settings = group_compass.add_group("Compass")

group_compass_binary = group_compass_settings.add_group("Binary")
group_compass_multiple = group_compass_settings.add_group("Multiple")

compass_type_enum = gen.enum([gen.const("binary", str_t, "binary", "Binary compass"),
                              gen.const("multiple", str_t, "multiple", "Multiple compass")],
                             "Choose from these compass types")

group_compass_akaze = group_compass.add_group("Akaze")
group_compass_orb = group_compass.add_group("Orb")
group_compass_sift = group_compass.add_group("Sift")

compass_matcher_enum = gen.enum([gen.const("akaze", str_t, "akaze", "Akaze matcher"),
                                 gen.const("orb", str_t, "orb", "Orb matcher"),
                                 gen.const("sift", str_t, "sift", "SIFT matcher")],
                                "Choose from these matcher types")

group_ros.add("img_msg_topic", str_t, 0, "Subscriber of the image input message", None)
group_ros.add("img_msg_queue_size", int_t, 0, "Subscriber of the image input message", min=1, max=20)
group_ros.add("ground_truth_trigger_topic", str_t, 0, "Subscriber to a std_msgs Header message to trigger the visual compass setup", None)
group_ros.add("ground_truth_trigger_queue_size", int_t, 0, "Subscriber to a std_msgs Header message to trigger the visual compass setup", None)

group_setup.add("ground_truth_file_path", str_t, 0, "Path to the ground truth file in the package", None)
group_setup.add("ground_truth_field", str_t, 0, "Field on which the ground truth was recorded", None)

group_compass_settings.add("compass_type", str_t, 0, "Compass type", "binary", edit_method=compass_type_enum)
group_compass_settings.add("compass_matcher", str_t, 0, "Matcher algorithm", "sift", edit_method=compass_matcher_enum)

group_compass_multiple.add("compass_multiple_ground_truth_images_count", int_t, 0, "Count of images to compute the ground truth", min=2, max=360)
group_compass_multiple.add("compass_multiple_feature_scalar", int_t, 0, "Big compass_multiple_feature_scalar -> small confidence for few found features", min=2, max=360)

group_compass_akaze.add("compass_akaze_match_distance_scalar", double_t, 0, "TODO", None)

group_compass_orb.add("compass_orb_max_feature_count", int_t, 0, "Maximal feature count")
group_compass_orb.add("compass_orb_match_distance_scalar", double_t, 0, "TODO")

exit(gen.generate(PACKAGE, "bitbots_visual_compass", "VisualCompass"))
