diff --git b/bitbots_common/src/bitbots_common/connector/capsules/animation_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/animation_capsule.py
index 69117ac..bb5b236 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/animation_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/animation_capsule.py
@@ -12,7 +12,7 @@ class AnimationCapsule:
         self.active = False
         self.anim_client = actionlib.SimpleActionClient('animation', PlayAnimationAction)
 
-    def play_animation(self, anim):
+    def play_animation(self, anim: str)->bool:
         """
         plays the animation "ani" and sets the flag "BusyAnimation"
 
diff --git b/bitbots_common/src/bitbots_common/connector/capsules/game_status_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/game_status_capsule.py
index eb97d7b..3b21799 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/game_status_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/game_status_capsule.py
@@ -72,6 +72,6 @@ class GameStatusCapsule:
     def is_allowed_to_move(self):
         return self.gamestate.allowedToMove or rospy.get_time() - self.lastupdate > 15
 
-    def gamestate_callback(self, gs):
+    def gamestate_callback(self, gs: GameState):
         self.gamestate = gs
         self.lastupdate = rospy.get_time()
diff --git b/bitbots_common/src/bitbots_common/connector/capsules/head_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/head_capsule.py
index 420c8b4..69266e6 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/head_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/head_capsule.py
@@ -48,7 +48,7 @@ class HeadCapsule:
 
         self.position_publisher = None  # type: rospy.Publisher
 
-    def send_motor_goals(self, pan_position, pan_speed, tilt_position, tilt_speed):
+    def send_motor_goals(self, pan_position: float, pan_speed: float, tilt_position: float, tilt_speed: float):
         self.current_pan_pos = pan_position
         self.current_tilt_pos = tilt_position
         posnew = math.radians(pan_position), math.radians(tilt_position)
@@ -67,10 +67,10 @@ class HeadCapsule:
     def get_confirmed_ball(self):
         return self.confirmedBall
 
-    def cb_headmode(self, headmode):
+    def cb_headmode(self, headmode: HeadMode):
         self._headmode = headmode.headMode
 
-    def joint_state_cb(self, msg):
+    def joint_state_cb(self, msg: JointState):
         i = 0
         for joint in msg.name:
             if joint == "HeadPan":
diff --git b/bitbots_common/src/bitbots_common/connector/capsules/team_data_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/team_data_capsule.py
index af9f739..54c72e3 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/team_data_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/team_data_capsule.py
@@ -55,7 +55,7 @@ class TeamDataCapsule:
 
         return position
 
-    def set_role(self, role):
+    def set_role(self, role: int):
         """ Set the Team Role - Need to be in data dict for Comm Modules """
         assert role in [ROLE_STRIKER, ROLE_DEFENDER, ROLE_SUPPORTER, ROLE_GOALIE]
         r = Strategy
diff --git b/bitbots_common/src/bitbots_common/connector/capsules/vision_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/vision_capsule.py
index 57b92b0..c0ad5aa 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/vision_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/vision_capsule.py
@@ -1,9 +1,8 @@
 import time
+from typing import List
 
 from humanoid_league_msgs.msg import ObstacleRelative, BallRelative, ObstaclesRelative, GoalRelative
 import rospy
-from tf2_geometry_msgs import PointStamped
-from geometry_msgs.msg import Point
 
 class VisionCapsule:
     def __init__(self):
@@ -25,15 +24,6 @@ class VisionCapsule:
     def get_ball_relative(self):
         return self.ball.ball_relative.x, self.ball.ball_relative.y
 
-    def get_ball_relative_msg(self):
-        return self.ball.ball_relative
-
-    def get_ball_relative_stamped(self):
-        ball = PointStamped()
-        ball.point = self.ball.ball_relative
-        ball.header = self.ball.header
-        return ball
-
     def get_ball_distance(self):
         x, y = self.get_ball_relative()
         return (x**2 + y**2)**0.5
@@ -48,24 +38,41 @@ class VisionCapsule:
     def any_goal_last_seen(self):
         return self.my_data.get("GoalLastSeen", -999)
 
+    def get_left_post_relative(self):
+        return self.goal.left_post.x, self.goal.left_post.y
+
+    def get_left_post_distance(self):
+        x, y = self.get_left_post_relative()
+        return (x**2 + y**2)**0.5
+
+    def get_right_post_relative(self):
+        if self.goal.right_post:
+            return self.goal.right_post.x, self.goal.right_post.y
+        else:
+            return
+
+    def get_right_post_distance(self):
+        if self.goal.right_post:
+            x, y = self.get_right_post_relative()
+            return (x**2 + y**2)**0.5
+        else:
+            return
+
     def get_goal_relative(self):
         if self.goal.center_direction:
-            return self.goal.center_direction
+            return self.goal.center_direction.x, self.goal.center_direction.y
         else:
             # We have to calculate it
             if self.get_right_post_relative():
-                goal = Point()
-                goal.x = (self.goal.right_post.x + self.goal.left_post.x) / 2
-                goal.y = (self.goal.right_post.y + self.goal.left_post.y) / 2
-                goal.z = (self.goal.right_post.z + self.goal.left_post.z) / 2
-                return goal
+                x = (self.get_right_post_relative()[0] + self.get_left_post_relative()[0]) / 2
+                y = (self.get_right_post_relative()[1] + self.get_left_post_relative()[1]) / 2
+                return x, y
             else:
-                return self.goal.left_post
+                return self.get_left_post_relative()
 
-    def get_goal_relative_stamped(self):
-        msg = PointStamped()
-        msg.point = self.get_goal_relative()
-        msg.header = self.goal.header()
+    def get_goal_distance(self):
+        x, y = self.get_goal_relative()
+        return (x**2 + y**2)**0.5
 
     #############
     # ## Other ##
@@ -80,11 +87,11 @@ class VisionCapsule:
         else:
             raise KeyError
 
-    def get_obstacle_found(self):
+    def get_obstacle_found(self)->bool:
 
         return len(self.obstacles.obstacles) > 0
 
-    def get_obstacle_info(self):
+    def get_obstacle_info(self)->List[ObstacleRelative]:
         """
         Liefert ObstacleInfos
 
@@ -99,13 +106,13 @@ class VisionCapsule:
 
         return self.obstacles.obstacles
 
-    def ball_callback(self, ball):
+    def ball_callback(self, ball: BallRelative):
         self.ball = ball
         self.my_data["BallLastSeen"] = rospy.get_time()
 
-    def goal_callback(self, goal):
+    def goal_callback(self, goal: GoalRelative):
         self.goal = goal
         self.my_data["GoalLastSeen"] = rospy.get_time()
 
-    def obstacle_callback(self, obstacles):
+    def obstacle_callback(self, obstacles: ObstaclesRelative):
         self.obstacles = obstacles
diff --git b/bitbots_common/src/bitbots_common/connector/capsules/walking_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/walking_capsule.py
index ac07ad5..250564e 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/walking_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/walking_capsule.py
@@ -26,5 +26,5 @@ class WalkingCapsule:
         t.angular.z = tw
         self.pub_walkin_params.publish(t)
 
-    def walking_callback(self):
+    def walking_callback(self, od: Odometry):
         self.odometry_data = copy.copy(od)
diff --git b/bitbots_common/src/bitbots_common/connector/capsules/world_model_capsule.py a/bitbots_common/src/bitbots_common/connector/capsules/world_model_capsule.py
index 5317f46..4fd43a2 100644
--- b/bitbots_common/src/bitbots_common/connector/capsules/world_model_capsule.py
+++ a/bitbots_common/src/bitbots_common/connector/capsules/world_model_capsule.py
@@ -6,6 +6,7 @@ Provides informations about the world model.
 
 """
 import math
+from typing import Tuple
 
 from humanoid_league_msgs.msg import Position2D
 
@@ -16,32 +17,32 @@ class WorldModelCapsule:
         self.ball_position_u = None
         self.ball_position_v = None
 
-    def get_current_position(self):
+    def get_current_position(self)->Tuple[float, float, float]:
         return self.position.pose.x, self.position.pose.y, self.position.pose.theta
 
-    def get_ball_position_xy(self):
+    def get_ball_position_xy(self)->Tuple[float, float]:
         raise NotImplementedError
 
     def ball_relative_cb(self, msg):
         self.ball_position_u = msg.ball_relative.x
         self.ball_position_v = msg.ball_relative.y
 
-    def get_ball_position_uv(self):
+    def get_ball_position_uv(self)->Tuple[float, float]:
         return self.ball_position_u, self.ball_position_v
 
-    def get_opp_goal_center_uv(self):
+    def get_opp_goal_center_uv(self)->Tuple[float, float]:
         raise NotImplementedError
 
-    def get_own_goal_center_uv(self):
+    def get_own_goal_center_uv(self)->Tuple[float, float]:
         raise NotImplementedError
 
-    def get_opp_goal_angle(self):
+    def get_opp_goal_angle(self)->float:
         raise NotImplementedError
 
-    def get_opp_goal_distance(self):
+    def get_opp_goal_distance(self)->float:
         raise NotImplementedError
 
-    def get_uv_from_xy(self, x, y):
+    def get_uv_from_xy(self, x, y)->Tuple[float, float]:
         """ Returns the relativ positions of the robot to this absolute position"""
         current_position = self.get_current_position()
         x2 = x - current_position[0]
@@ -51,7 +52,7 @@ class WorldModelCapsule:
         v = math.cos(theta) * y2 - math.sin(theta) * x2
         return u, v
 
-    def get_distance_to_xy(self, x, y):
+    def get_distance_to_xy(self, x, y)->float:
         """ Returns distance from robot to given position """
 
         u, v = self.get_uv_from_xy(x, y)
@@ -59,8 +60,8 @@ class WorldModelCapsule:
 
         return dist
 
-    def get_ballpos(self):
+    def get_ballpos(self)->Tuple[float, float]:
         raise NotImplementedError
 
-    def position_callback(self, pos):
+    def position_callback(self, pos: Position2D):
         self.position = pos
diff --git b/bitbots_common/src/bitbots_common/connector/connector.py a/bitbots_common/src/bitbots_common/connector/connector.py
index 20b00ce..14458a3 100644
--- b/bitbots_common/src/bitbots_common/connector/connector.py
+++ a/bitbots_common/src/bitbots_common/connector/connector.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python2.7
+#!/usr/bin/env python3
 
 import rospy
 from bitbots_common.connector.capsules.animation_capsule import AnimationCapsule
@@ -11,7 +11,7 @@ from bitbots_common.connector.capsules.head_capsule import HeadCapsule
 from bitbots_common.connector.capsules.vision_capsule import VisionCapsule
 
 
-class AbstractConnector(object):
+class AbstractConnector:
     def __init__(self):
         self.vision = VisionCapsule()
         self.world_model = WorldModelCapsule()
@@ -22,7 +22,7 @@ class AbstractConnector(object):
 
 class BodyConnector(AbstractConnector):
     def __init__(self):
-        super(BodyConnector, self).__init__()
+        super().__init__()
         self.blackboard = BlackboardCapsule()
         self.gamestate = GameStatusCapsule()
         self.walking = WalkingCapsule()
@@ -33,5 +33,5 @@ class BodyConnector(AbstractConnector):
 
 class HeadConnector(AbstractConnector):
     def __init__(self):
-        super(HeadConnector, self).__init__()
+        super().__init__()
         self.head = HeadCapsule()
